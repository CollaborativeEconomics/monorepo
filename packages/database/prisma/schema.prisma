generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model Account {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @map("_id") @db.Uuid
  access_token      String    @db.VarChar(255)
  provider          String    @db.VarChar(255)
  providerAccountId String    @db.VarChar(255)
  scope             String    @db.VarChar(255)
  refresh_token     String?
  expires_at        DateTime? @db.Timestamptz(6)
  token_type        String?   @db.VarChar(255)
  type              String    @db.VarChar(255)
  userId            String    @db.Uuid
  id_token          String?   @db.VarChar(255)
  session_state     String?   @db.VarChar(255)
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Action {
  id               String @id @default(dbgenerated("gen_random_uuid()")) @map("_id") @db.Uuid
  hookId           String @db.Uuid
  actionDefinition Json
  index            Int    @default(0)
  hook             Hook   @relation(fields: [hookId], references: [id], onDelete: Cascade)

  @@map("actions")
}

model Artwork {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @map("_id") @db.Uuid
  created       DateTime     @default(now()) @db.Timestamptz(6)
  inactive      Boolean      @default(false)
  tokenId       String       @db.VarChar(255)
  authorId      String       @db.Uuid
  collectionId  String       @db.Uuid
  categoryId    String?      @db.Uuid
  name          String       @db.VarChar(255)
  description   String
  image         String       @db.VarChar(255)
  artwork       String       @db.VarChar(255)
  metadata      String       @db.VarChar(255)
  media         String       @db.VarChar(255)
  beneficiaryId String       @db.Uuid
  royalties     Int          @default(0)
  forsale       Boolean      @default(false)
  copies        Int          @default(0)
  sold          Int          @default(0)
  price         Int          @default(0)
  likes         Int          @default(0)
  views         Int          @default(0)
  tags          String?      @db.VarChar(255)
  author        User         @relation(fields: [authorId], references: [id])
  beneficiary   Organization @relation(fields: [beneficiaryId], references: [id])
  collection    Collection   @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  offers        Offer[]

  @@map("artworks")
}

model Category {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @map("_id") @db.Uuid
  slug          String         @unique
  color         String?        @db.VarChar(20)
  title         String         @db.VarChar(255)
  description   String         @db.VarChar(255)
  image         String?        @db.VarChar(255)
  donations     Donation[]
  initiatives   Initiative[]
  organizations Organization[]
  stories       Story[]

  @@map("categories")
}

model Chapter {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @map("_id") @db.Uuid
  created     DateTime @default(now()) @db.Timestamptz(6)
  inactive    Boolean  @default(false)
  slug        String   @db.VarChar(255)
  name        String   @db.VarChar(255)
  description String
  location    String   @db.VarChar(255)

  @@map("chapters")
}

model Collection {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @map("_id") @db.Uuid
  created     DateTime  @default(now()) @db.Timestamptz(6)
  inactive    Boolean   @default(false)
  curated     Boolean   @default(false)
  authorId    String    @db.Uuid
  name        String    @db.VarChar(255)
  description String
  image       String    @db.VarChar(255)
  taxon       String    @db.VarChar(255)
  nftcount    Int       @default(0)
  artworks    Artwork[]
  author      User      @relation(fields: [authorId], references: [id])
  offers      Offer[]

  @@map("collections")
}

model Credit {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @map("_id") @db.Uuid
  providerId   String     @db.Uuid
  initiativeId String     @db.Uuid
  type         CreditType
  description  String
  currency     String     @db.VarChar(20)
  value        Decimal    @default(0) @db.Decimal(8, 2)
  start        DateTime   @default(now()) @db.Timestamptz(6)
  finish       DateTime?  @db.Timestamptz(6)
  filled       Boolean    @default(false)
  current      Decimal?   @default(0) @db.Decimal(12, 2)
  goal         Decimal?   @default(0) @db.Decimal(12, 2)
  initiative   Initiative @relation(fields: [initiativeId], references: [id])
  provider     Provider   @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@map("credits")
}

model Cronjob {
  id      String   @id @default(dbgenerated("gen_random_uuid()")) @map("_id") @db.Uuid
  created DateTime @default(now()) @db.Timestamptz(6)
  cron    String   @db.VarChar(200)
  status  Int
  result  Json

  @@map("cronjobs")
}

model Donation {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @map("_id") @db.Uuid
  created        DateTime     @default(now()) @db.Timestamptz(6)
  organizationId String       @db.Uuid
  chapterId      String?      @db.Uuid
  initiativeId   String?      @db.Uuid
  userId         String?      @db.Uuid
  paytype        String?      @db.VarChar(20)
  network        String?      @db.VarChar(20)
  wallet         String?      @db.VarChar(255)
  amount         Decimal      @default(0) @db.Decimal(14, 4)
  usdvalue       Decimal      @default(0) @db.Decimal(14, 4)
  asset          String?      @db.VarChar(255)
  issuer         String?      @db.VarChar(255)
  status         Int          @default(0)
  categoryId     String?      @db.Uuid
  chain          Chain?
  storyId        String?      @db.Uuid
  category       Category?    @relation(fields: [categoryId], references: [id])
  initiative     Initiative?  @relation(fields: [initiativeId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  impactlinks    ImpactLink[]

  @@map("donations")
}

model Hook {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @map("_id") @db.Uuid
  triggerName   String       @db.VarChar(255)
  createdAt     DateTime     @default(now()) @db.Timestamptz(6)
  orgId         String       @db.Uuid
  actions       Action[]
  organizations Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@map("hooks")
}

model Initiative {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @map("_id") @db.Uuid
  created        DateTime         @default(now()) @db.Timestamptz(6)
  inactive       Boolean          @default(false)
  slug           String           @db.VarChar(255)
  organizationId String           @db.Uuid
  chapterId      String?          @db.Uuid
  categoryId     String?          @db.Uuid
  title          String           @db.VarChar(255)
  description    String
  defaultAsset   String           @db.VarChar(255)
  imageUri       String?          @db.VarChar(255)
  start          DateTime         @default(now()) @db.Timestamptz(6)
  finish         DateTime?        @db.Timestamptz(6)
  tag            Int              @unique
  contractnft    String?          @db.VarChar(255)
  wallet         String?          @db.VarChar(255)
  country        String?          @db.VarChar(255)
  donors         Int              @default(0)
  institutions   Int              @default(0)
  goal           Int              @default(0)
  received       Int              @default(0)
  lastmonth      Int              @default(0)
  contractcredit String?          @db.VarChar(255)
  unitvalue      Int?             @default(0)
  unitlabel      String?          @db.VarChar(20)
  credits        Credit[]
  donations      Donation[]
  category       Category?        @relation(fields: [categoryId], references: [id])
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  tiers          InitiativeTier[]
  nfts           NFTData[]
  stories        Story[]
  wallets        Wallet[]

  @@map("initiatives")
}

model InitiativeTier {
  id             String      @id @default(dbgenerated("gen_random_uuid()")) @map("_id") @db.Uuid
  created        DateTime    @default(now()) @db.Timestamptz(6)
  inactive       Boolean     @default(false)
  organizationId String?     @db.Uuid
  chapterId      String?     @db.Uuid
  initiativeId   String?     @db.Uuid
  amount         Int         @default(0)
  asset          String?     @db.VarChar(255)
  currency       String?     @db.VarChar(255)
  issuer         String?     @db.VarChar(255)
  title          String      @db.VarChar(255)
  description    String      @db.VarChar(255)
  initiative     Initiative? @relation(fields: [initiativeId], references: [id], onDelete: SetNull)

  @@map("initiativetiers")
}

model NFTData {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @map("_id") @db.Uuid
  created        DateTime     @default(now()) @db.Timestamptz(6)
  donorAddress   String       @db.VarChar(255)
  userId         String       @db.Uuid
  organizationId String       @db.Uuid
  initiativeId   String?      @db.Uuid
  metadataUri    String       @db.VarChar(255)
  imageUri       String       @db.VarChar(255)
  network    String?      @db.VarChar(20)
  chainName      String?      @db.VarChar(20)
  coinSymbol     String?      @db.VarChar(20)
  coinValue      Decimal      @default(0) @db.Decimal(14, 4)
  usdValue       Decimal      @default(0) @db.Decimal(14, 4)
  tokenId        String       @db.VarChar(255)
  offerId        String?      @db.VarChar(255)
  status         Int          @default(0)
  donationId     String?      @db.Uuid
  initiative     Initiative?  @relation(fields: [initiativeId], references: [id], onDelete: SetNull)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id])

  @@map("nft_data")
}

model Offer {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @map("_id") @db.Uuid
  created       DateTime      @default(now()) @db.Timestamptz(6)
  type          Int           @default(0)
  artworkId     String        @db.Uuid
  collectionId  String        @db.Uuid
  beneficiaryId String?       @db.Uuid
  buyerId       String?       @db.Uuid
  sellerId      String        @db.Uuid
  offerId       String        @db.VarChar(255)
  tokenId       String        @db.VarChar(255)
  price         Int           @default(0)
  royalties     Int           @default(0)
  wallet        String        @db.VarChar(255)
  status        Int           @default(0)
  artwork       Artwork       @relation(fields: [artworkId], references: [id], onDelete: Cascade)
  beneficiary   Organization? @relation(fields: [beneficiaryId], references: [id])
  buyer         User?         @relation("buyer", fields: [buyerId], references: [id])
  collection    Collection    @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  seller        User          @relation("seller", fields: [sellerId], references: [id])

  @@map("offers")
}

model Organization {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @map("_id") @db.Uuid
  created        DateTime     @default(now()) @db.Timestamptz(6)
  inactive       Boolean      @default(false)
  slug           String       @db.VarChar(255)
  EIN            String?      @db.VarChar(20)
  country        String       @db.VarChar(30)
  description    String
  image          String?      @db.VarChar(255)
  mailingAddress String?      @db.VarChar(255)
  name           String       @db.VarChar(255)
  phone          String?      @db.VarChar(40)
  email          String       @unique @db.VarChar(100)
  url            String?      @db.VarChar(255)
  categoryId     String?      @db.Uuid
  featured       Boolean      @default(false)
  donors         Int          @default(0)
  institutions   Int          @default(0)
  received       Int          @default(0)
  lastmonth      Int          @default(0)
  twitter        String?      @db.VarChar(255)
  facebook       String?      @db.VarChar(255)
  goal           Int?         @default(0)
  background     String?      @db.VarChar(255)
  artworks       Artwork[]
  donations      Donation[]
  hooks          Hook[]
  initiative     Initiative[]
  nfts           NFTData[]
  offers         Offer[]
  category       Category?    @relation(fields: [categoryId], references: [id])
  stories        Story[]
  wallets        Wallet[]

  @@map("organizations")
}

model Provider {
  id      String   @id @default(dbgenerated("gen_random_uuid()")) @map("_id") @db.Uuid
  name    String   @db.VarChar(255)
  apiUrl  String   @db.VarChar(255)
  credits Credit[]

  @@map("providers")
}

model Reward {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @map("_id") @db.Uuid
  name String @db.VarChar(255)

  @@map("rewards")
}

model Session {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @map("_id") @db.Uuid
  expires      DateTime? @db.Timestamptz(6)
  sessionToken String    @unique
  userId       String    @db.Uuid
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Setting {
  id    String @id @default(dbgenerated("gen_random_uuid()")) @map("_id") @db.Uuid
  name  String @unique @db.VarChar(40)
  value String @db.VarChar(255)

  @@map("settings")
}

model Story {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @map("_id") @db.Uuid
  created        DateTime     @default(now()) @db.Timestamptz(6)
  inactive       Boolean      @default(false)
  organizationId String       @db.Uuid
  initiativeId   String       @db.Uuid
  name           String?      @db.VarChar(255)
  description    String?      @db.VarChar(255)
  amount         Int?
  image          String?      @db.VarChar(255)
  tokenId        String?      @db.VarChar(255)
  metadata       String?      @db.VarChar(255)
  categoryId     String?      @db.Uuid
  unitvalue      Int?         @default(0)
  unitlabel      String?      @db.VarChar(40)
  impactlinks    ImpactLink[]
  category       Category?    @relation(fields: [categoryId], references: [id])
  initiative     Initiative   @relation(fields: [initiativeId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  media          StoryMedia[]

  @@map("stories")
}

model StoryMedia {
  id      String   @id(map: "storypics_pkey") @default(dbgenerated("gen_random_uuid()")) @map("_id") @db.Uuid
  created DateTime @default(now()) @db.Timestamptz(6)
  storyId String   @db.Uuid
  media   String   @db.VarChar(255)
  mime    String?  @db.VarChar(60)
  story   Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@map("storymedia")
}

model User {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @map("_id") @db.Uuid
  created         DateTime     @default(now()) @db.Timestamptz(6)
  inactive        Boolean      @default(false)
  api_key         String?      @unique @db.VarChar(255)
  api_key_enabled Boolean?     @default(false)
  email           String?      @unique @db.VarChar(100)
  emailVerified   Boolean?     @default(false)
  image           String?      @db.VarChar(255)
  name            String       @db.VarChar(255)
  description     String?      @db.VarChar(255)
  wallet          String?      @db.VarChar(255)
  type            Int          @default(0)
  Account         Account[]
  artworks        Artwork[]
  collections     Collection[]
  nfts            NFTData[]
  buyers          Offer[]      @relation("buyer")
  offers          Offer[]      @relation("seller")
  Session         Session[]
  wallets         UserWallet[]

  @@map("users")
}

model UserWallet {
  id      String  @id @default(dbgenerated("gen_random_uuid()")) @map("_id") @db.Uuid
  address String  @db.VarChar(255)
  userId  String  @db.Uuid
  chain   Chain
  network String? @db.VarChar(10)
  users   User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("userwallets")
}

model VerificationToken {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @map("_id") @db.Uuid
  identifier String   @db.VarChar(255)
  token      String   @unique @db.VarChar(255)
  expires    DateTime @db.Timestamptz(6)

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Wallet {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @map("_id") @db.Uuid
  organizationId String       @db.Uuid
  initiativeId   String?      @db.Uuid
  address        String       @db.VarChar(255)
  chain          Chain
  network        String?      @db.VarChar(10)
  initiatives    Initiative?  @relation(fields: [initiativeId], references: [id], onDelete: SetNull)
  organizations  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("wallets")
}

model Contract {
  id                   String    @id @default(dbgenerated("gen_random_uuid()")) @map("_id") @db.Uuid
  created              DateTime? @default(now()) @db.Timestamptz(6)
  inactive             Boolean?  @default(false)
  chain                String?   @db.VarChar(20)
  contract_address     String?   @db.VarChar(128)
  entity_id            String?   @db.VarChar(36)
  admin_wallet_address String?   @db.VarChar(128)
  contract_type        String?   @db.VarChar(40)
  network              String?   @db.VarChar(10)
  start_block          String?   @db.VarChar(20)

  @@map("contracts")
}

model EventMedia {
  id       String    @id @default(dbgenerated("gen_random_uuid()")) @map("_id") @db.Uuid
  created  DateTime? @default(now()) @db.Timestamptz(6)
  inactive Boolean?  @default(false)
  eventid  String?   @db.Uuid
  mediaurl String?   @db.VarChar(255)
  mime     String?   @db.VarChar(60)

  @@map("eventmedia")
}

model Event {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @map("_id") @db.Uuid
  created        DateTime? @default(now()) @db.Timestamptz(6)
  inactive       Boolean?  @default(false)
  status         Int?      @default(0) @db.SmallInt
  organizationid String?   @db.Uuid
  initiativeid   String?   @db.Uuid
  name           String?   @db.VarChar(100)
  description    String?
  location       String?   @db.VarChar(100)
  budget         Int?      @default(0)
  unitvalue      Int?      @default(0)
  unitlabel      String?   @db.VarChar(40)
  quantity       Int?      @default(0)
  voltoearn      Boolean?  @default(false)
  volunteers     Int?      @default(0)
  image          String?   @db.VarChar(255)
  payrate        Decimal?  @default(0) @db.Decimal(10, 2)

  @@map("events")
}

model ImpactLink {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @map("_id") @db.Uuid
  created    DateTime? @default(now()) @db.Timestamptz(6)
  storyid    String?   @db.Uuid
  donationid String?   @db.Uuid
  amount     Decimal?  @default(0.0) @db.Decimal(14, 4)
  partial    Boolean?  @default(false)
  donation   Donation? @relation(fields: [donationid], references: [id], onDelete: Cascade)
  story      Story?    @relation(fields: [storyid], references: [id], onDelete: Cascade)

  @@map("impactlink")
}

model Volunteer {
  id       String    @id @default(dbgenerated("gen_random_uuid()")) @map("_id") @db.Uuid
  created  DateTime? @default(now()) @db.Timestamptz(6)
  inactive Boolean?  @default(false)
  status   Int?      @default(0) @db.SmallInt
  eventid  String?   @db.Uuid
  address  String?   @db.VarChar(255)
  units    Int?      @default(0)
  payrate  Int?      @default(0)
  amount   Int?      @default(0)
  nftid    String?   @db.VarChar(255)
  chain    String?   @db.VarChar(20)

  @@map("volunteers")
}

model TokenBoundAccount {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created         DateTime? @default(now()) @db.Timestamptz(6)
  entity_type     String?   @db.VarChar(20)
  entity_id       String?   @db.Uuid
  account_address String?   @db.VarChar(64)
  parent_address  String?   @db.VarChar(64)
  chain           String?   @db.VarChar(20)
  network         String?   @db.VarChar(20)

  @@map("token_bound_accounts")
}

enum Chain {
  Arbitrum
  Avalanche
  Base
  Binance
  Celo
  EOS
  Ethereum
  Filecoin
  Flare
  Optimism
  Polygon
  Starknet
  Stellar
  Tron
  XDC
  XRPL
}

enum CreditType {
  None
  Carbon
  Plastic
  Biodiversity
}
